# -*-mode: python; py-indent-offset: 4; tab-width: 8; coding: iso-8859-1 -*-
"""
Formula analysis lex

Describes what are the reserved keyword during formula analysis

@author: Arnaud BARTHET
"""
__version__=2.0

import lex
import math

# Dictionnary of reserved token 
reserved = {
    'max':'MAX','min':'MIN',
    'exp':'EXP','log':'LOG',
    'sin':'SIN','cos':'COS',
    'int':'INT','abs':'ABS', 
    'sqrt':'SQRT','cmp':'CMP',
    'tan':'TAN','acos':'ACOS',
    'asin':'ASIN','atan':'ATAN',
    }

# Token definition
tokens = [
    'VARIABLE',
    'NUMBER',
    'INTEGER',
    'PLUS','MINUS','TIMES','DIVIDE','POW',
    'LPAREN','RPAREN','DERIVATE','ZERO','COMMA'
    ]+reserved.values()

# Tokens
# Generated by REGEXP
# begin by a string or an _ [A-Za-z_] and then there is a word \w or not *
#t_VARIABLE= r'[A-Za-z_][\w_\.]*'
t_PLUS    = r'\+'
t_MINUS   = r'-'
t_TIMES   = r'\*'
t_DIVIDE  = r'/'
t_POW     = r'\^|\*\*'
t_LPAREN  = r'\('
t_RPAREN  = r'\)'
t_DERIVATE= r'@'
t_NUMBER  = r'\d+\.\d*([eE][-+]?\d+)?'
t_INTEGER = r'\d+'
t_ZERO    = r'ZERO'
#t_MAX     = r'max\(([A-Za-z_][\w_]*|\+|-|\*|/|\^|\*\*|@|\d+\.\d*([eE][-+]?\d+)?|\d+\.?([eE][-+]?\d+)?)+,([A-Za-z_][\w_]*|\+|-|\*|/|\^|\*\*|@|\d+\.\d*([eE][-+]?\d+)?|\d+\.?([eE][-+]?\d+)?)+\)'
#t_MAX     = r'%max'
t_COMMA   = r','

def t_VARIABLE(t):
    r'[A-Za-z_][\w_\.]*'
    # Give the excepted value
    t.type=reserved.get(t.value,'VARIABLE')
    if t.type=='EXP' or t.value=='math.exp'  :
        t.value='math.exp'
        t.type='EXP'
    elif t.type=='LOG' or t.value=='math.log' :
        t.value='math.log'
        t.type='LOG'
    elif t.type=='SIN' or t.value=='math.sin' :
        t.value='math.sin'
        t.type='SIN'
    elif t.type=='ASIN' or t.value=='math.asin' :
        t.value='math.asin'
        t.type='ASIN'
    elif t.type=='COS' or t.value=='math.cos' :
        t.value='math.cos'
        t.type='COS'
    elif t.type=='ACOS' or t.value=='math.acos' :
        t.value='math.acos'
        t.type='ACOS'
    elif t.type=='TAN' or t.value=='math.tan' :
        t.value='math.tan'
        t.type='TAN'
    elif t.type=='ATAN' or t.value=='math.atan' :
        t.value='math.atan'
        t.type='ATAN'
    elif t.type=='SQRT' or t.value=='math.sqrt' :
        t.value='math.sqrt'
        t.type='SQRT'
    elif t.value == 'math.pi':
        t.value=str(math.pi)
    elif t.value == 'math.e':
        t.value=str(math.e)
    return t

# Ignored characters
t_ignore = " \t"

def t_newline(t):
    r'\n+'
    t.lexer.lineno += t.value.count("\n")
    
def t_error(t):
    print "Illegal character '%s'" % t.value[0]
    t.lexer.skip(1)

def create_lexer():
    lexer=lex.lex()
    return lexer
